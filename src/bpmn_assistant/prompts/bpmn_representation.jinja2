The BPMN JSON representation uses a sequence of elements to describe the process. Each element is executed in order based on its position in the "process" array unless gateways (exclusive or parallel) specify branching paths.

# Representation of various BPMN elements

## Tasks

Specify the task type in the 'type' field. The following task types are supported: "task", "userTask", "serviceTask", "sendTask", "receiveTask", "businessRuleTask", "manualTask", "scriptTask".
Always try to specify the most specific task type:
- Use 'userTask' for human interaction tasks (reviewing, deciding, entering data)
- Use 'serviceTask' for automated system actions (calculations, database operations, API calls)
- Use 'sendTask' for automated sending operations (emails, notifications, messages)
- Use 'receiveTask' for automated receiving operations (waiting for messages, webhooks)
- Use 'businessRuleTask' for decision engine or rule evaluation tasks
- Use 'manualTask' for manual work performed without system support (physical activities, paper forms)
- Use 'scriptTask' for script or code execution tasks
- Use 'task' only if the action cannot be clearly classified as any of the above
Each task must be atomic - representing a single unit of work. Break down complex activities into multiple separate tasks.
Labels must be clear and concise (ideally 2-4 words).

```json
{
    "type": String = "task" | "userTask" | "serviceTask" | "sendTask" | "receiveTask" | "businessRuleTask" | "manualTask" | "scriptTask"
    "id": String,
    "label": String, // short task description
}
```

## Events

Specify the event type in the 'type' field. The following event types are supported: "startEvent", "endEvent", "intermediateThrowEvent", "intermediateCatchEvent".

Events can optionally have an event definition that specifies what triggers or is triggered by the event:
- Use 'timerEventDefinition' for time-based events (schedules, delays, timeouts)
- Use 'messageEventDefinition' for message-based events (sending or receiving messages)
- Omit 'eventDefinition' for generic/none events

Event types:
- 'startEvent' - starts the process (can have timerEventDefinition or messageEventDefinition)
- 'endEvent' - ends the process (can have messageEventDefinition)
- 'intermediateThrowEvent' - throws/triggers an event during the process (typically with messageEventDefinition)
- 'intermediateCatchEvent' - waits for an event during the process (can have timerEventDefinition or messageEventDefinition)

```json
{
    "type": String = "startEvent" | "endEvent" | "intermediateThrowEvent" | "intermediateCatchEvent",
    "id": String,
    "label": String, // OPTIONAL: short event description
    "eventDefinition": String = "timerEventDefinition" | "messageEventDefinition", // OPTIONAL: event trigger type
}
```

## Gateways

Gateways determine process flow based on conditions or parallel tasks.

### Exclusive gateway

Each branch must include a condition and an array of elements that are executed if the condition is met.
If a branch has an empty "path", it leads to the first element after the exclusive gateway.
If the branch does not lead to the next element in the process (for example, it goes back to a previous element), specify the next element id.
If the branch leads to the next element in the process, do not specify the next element id.
If the process needs to end under a specific condition, you must explicitly include an end event in that branch's "path". If no end event is provided, the process will automatically continue to the next task in the sequence.
If the process description does not explicitly mention the 'else' branch or specify the outcome for an unmet condition, assume it leads to an end event.


```json
{
    "type": String = "exclusiveGateway",
    "id": String,
    "label": String, // label for the gateway (e.g. "Professor agrees?")
    "has_join": Boolean, // whether the gateway contains a join element that merges the branches
    "branches": [
        {
            "condition": String, // condition for the branch
            "path": [], // array of elements that are executed if the condition is met (can be empty)
            "next": String, // OPTIONAL: ID of the next element if not following default sequence. Omit or set to null if following default sequence.
        },
        {
            "condition": String,
            "path": [],
            "next": String, // OPTIONAL: as above
        },
        // ... more branches
    ],
}
```

### Parallel gateway

Specify "branches" as an array of arrays, where each sub-array lists elements executed in parallel.
A converging element is automatically generated to synchronize parallel branches. Therefore, there's no need to explicitly specify it.

```json
{
    "type": String = "parallelGateway",
    "id": String,
    "branches": [
        [], // array of elements that are executed in parallel with the next array
        [], // array of elements that are executed in parallel with the previous array
        // ... more arrays
    ],
}
```